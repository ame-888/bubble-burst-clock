---
// --- PAGE BRAIN ---
import { CLAIMS_DATA } from '../CLAIMS_DATA';

// Get the most recent claim date
const latestClaim = CLAIMS_DATA.reduce((latest, current) => {
    const latestDate = new Date(latest.date);
    const currentDate = new Date(current.date);
    return currentDate > latestDate ? current : latest;
});
const latestClaimDate = latestClaim.date;

// Helper functions to style the badges
const getStatusBadgeClasses = (status: string): string => {
    const baseClasses = "badge";
    if (status.toLowerCase().startsWith('ongoing')) return `${baseClasses} status-ongoing`;
    if (status.toLowerCase().startsWith('pending')) return `${baseClasses} status-pending`;
    if (status === 'Expired - Unproven') return `${baseClasses} status-expired-unproven`;
    if (status.toLowerCase().startsWith('expired')) return `${baseClasses} status-expired`;
    return `${baseClasses} status-default`;
};

const getClaimTypeBadgeClasses = (claimType: string): string => {
    const baseClasses = "badge";
    if (claimType === 'Title Only') return `${baseClasses} type-title`;
    if (claimType === 'In-Video Claim') return `${baseClasses} type-video`;
    return `${baseClasses} type-default`;
};
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>The AI Bubble Burst Clock</title>
    <meta name="google-site-verification" content="gi2pzxwjvX7zQtdowKjXbAw1wGHfjs8Cdf2w5ThdNcM" />
    <style>
        body { background-color: #111827; color: white; font-family: sans-serif; padding: 2rem; }
        main { max-width: 80rem; margin: auto; }
        h1 { font-size: 2.25rem; font-weight: bold; text-align: center; margin-bottom: 0.5rem; }
        h2 { font-size: 1.25rem; color: #9CA3AF; text-align: center; margin-bottom: 3rem; }

        .clock-container {
            text-align: center;
            margin-bottom: 3rem;
        }

        .clock-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #9CA3AF;
        }

        .clock {
            font-size: 4rem;
            font-weight: 900;
            color: white;
            letter-spacing: 0.1em;
            transition: color 0.5s ease;
        }

        .last-claim {
            margin-bottom: 2rem;
            padding: 1rem;
            background-color: #1F2937;
            border-radius: 0.5rem;
            text-align: center;
        }

        .last-claim p {
            margin: 0.5rem 0;
        }

        .table-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .filter-container,
        .sort-container {
            display: flex;
            align-items: center;
        }

        .filter-container label,
        .sort-container label {
            margin-right: 0.5rem;
        }

        .filter-container select,
        .sort-container select {
            background-color: #374151;
            color: white;
            border: 1px solid #4B5563;
            border-radius: 0.25rem;
            padding: 0.5rem;
        }

        table { width: 100%; border-collapse: collapse; }
        thead { background-color: #374151; }
        th, td { padding: 0.75rem 1rem; text-align: left; border-bottom: 1px solid #374151; }
        th { font-size: 0.875rem; font-weight: 600; }
        td { font-size: 0.875rem; color: #D1D5DB; vertical-align: middle; }
        .table-container { overflow-x: auto; border-radius: 0.5rem; background-color: #1F2937; }
        .thumbnail { width: 8rem; border-radius: 0.375rem; }
        .link { color: #60A5FA; text-decoration: none; }
        .link:hover { text-decoration: underline; }
        .badge { display: inline-flex; padding: 0.125rem 0.625rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; white-space: nowrap; }
        .status-ongoing { background-color: #065F46; color: #D1FAE5; }
        .status-pending { background-color: #92400E; color: #FEF3C7; }
        .status-expired { background-color: #991B1B; color: #FEE2E2; }
        .status-expired-unproven { background-color: #991B1B; color: #FEE2E2; }

        .type-title { background-color: #1E40AF; color: #DBEAFE; }
        .type-video { background-color: #5B21B6; color: #EDE9FE; }

        /* Style for the new legend section */
        .legend-section {
          margin-top: 3rem;
          padding: 1.5rem;
          background-color: #1F2937;
          border-radius: 0.5rem;
          color: #D1D5DB;
        }
        .legend-section h3 {
          margin-top: 0;
          margin-bottom: 1rem;
          font-size: 1.25rem;
          color: white;
        }
        .legend-section strong {
          color: #9CA3AF;
        }
    </style>
</head>
<body>
    <main>
        <h1>The AI Bubble Burst Clock</h1>
        <h2>A timeline of predictions that never come true.</h2>

        <div class="clock-container">
            <div class="last-claim">
                <p>Time elapsed since the last significant prediction...</p>
                <p><strong>Claim:</strong> "{latestClaim.claim}"</p>
                <p><strong>Claimer:</strong> {latestClaim.claimer}</p>
                <p><strong>Date:</strong> {latestClaim.date}</p>
            </div>
            <div class="clock-title">LAST BURST BUBBLE</div>
            <div id="clock" class="clock"></div>
        </div>

        <div class="table-controls">
            <div class="filter-container">
                <label for="status-filter">Filter by Status:</label>
                <select id="status-filter">
                    <option value="all">All</option>
                    <option value="Ongoing">Ongoing</option>
                    <option value="Pending">Pending</option>
                    <option value="Expired - Unproven">Expired - Unproven</option>
                </select>
            </div>
            <div class="sort-container">
                <label for="date-sort">Sort by Date:</label>
                <select id="date-sort">
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                </select>
            </div>
        </div>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>DATE</th>
                        <th>CLAIMER</th>
                        <th>THUMBNAIL</th>
                        <th>CLAIM</th>
                        <th>LINK</th>
                        <th>STATUS</th>
                        <th>CLAIM TYPE</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <!-- New legend section added here -->
        <div class="legend-section">
          <h3>Status Legend</h3>
          <p><span class="badge status-ongoing">Ongoing</span> Impossible to verify.</p>
          <p><span class="badge status-pending">Pending</span> Awaiting the date for verification.</p>
          <p><span class="badge status-expired-unproven">Expired - Unproven</span> The prediction failed to be proven within the allocated time-frame. Any video with a claim the AI bubble is "about to burst" or "already bursting" has a <strong>3 month time limit</strong> to prove itself correct, else it's marked with this status.</p>
        </div>

    </main>
    <script define:vars={{ latestClaimDate, CLAIMS_DATA }}>
        const clockElement = document.getElementById('clock');
        const startDate = new Date(latestClaimDate);

        const statusFilter = document.getElementById('status-filter');
        const dateSort = document.getElementById('date-sort');
        const tableBody = document.querySelector('table tbody');

        let claims = [...CLAIMS_DATA];

        function renderTable() {
            tableBody.innerHTML = '';
            claims.forEach(claim => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${claim.date}</td>
                    <td>${claim.claimer}</td>
                    <td><img src="${claim.thumbnailUrl}" alt="Thumbnail" class="thumbnail" referrerPolicy="no-referrer" /></td>
                    <td>${claim.claim}</td>
                    <td><a href="${claim.link}" target="_blank" rel="noopener noreferrer" class="link">Watch</a></td>
                    <td><span class="${getStatusBadgeClasses(claim.status)}">${claim.status}</span></td>
                    <td><span class="${getClaimTypeBadgeClasses(claim.claimType)}">${claim.claimType}</span></td>
                `;
                tableBody.appendChild(row);
            });
        }

        function getStatusBadgeClasses(status) {
            const baseClasses = "badge";
            if (status.toLowerCase().startsWith('ongoing')) return `${baseClasses} status-ongoing`;
            if (status.toLowerCase().startsWith('pending')) return `${baseClasses} status-pending`;
            if (status === 'Expired - Unproven') return `${baseClasses} status-expired-unproven`;
            if (status.toLowerCase().startsWith('expired')) return `${baseClasses} status-expired`;
            return `${baseClasses} status-default`;
        }

        function getClaimTypeBadgeClasses(claimType) {
            const baseClasses = "badge";
            if (claimType === 'Title Only') return `${baseClasses} type-title`;
            if (claimType === 'In-Video Claim') return `${baseClasses} type-video`;
            return `${baseClasses} type-default`;
        }

        function updateData() {
            let filteredClaims = [...CLAIMS_DATA];

            // Filter by status
            const status = statusFilter.value;
            if (status !== 'all') {
                filteredClaims = filteredClaims.filter(claim => claim.status === status);
            }

            // Sort by date
            const sortOrder = dateSort.value;
            filteredClaims.sort((a, b) => {
                const dateA = new Date(a.date);
                const dateB = new Date(b.date);
                if (sortOrder === 'newest') {
                    return dateB - dateA;
                } else {
                    return dateA - dateB;
                }
            });

            claims = filteredClaims;
            renderTable();
        }

        statusFilter.addEventListener('change', updateData);
        dateSort.addEventListener('change', updateData);

        // Initial table render
        updateData();

        function updateClock() {
            const now = new Date();
            const diff = now - startDate;

            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((diff % (1000 * 60)) / 1000);

            clockElement.textContent =
                `${days}d ${hours.toString().padStart(2, '0')}h ${minutes.toString().padStart(2, '0')}m ${seconds.toString().padStart(2, '0')}s`;

            // Change color based on elapsed time
            if (days < 30) {
                clockElement.style.color = '#60A5FA'; // Calm blue
            } else if (days < 60) {
                clockElement.style.color = '#FBBF24'; // Warning yellow
            } else {
                clockElement.style.color = '#EF4444'; // Warning red
            }
        }

        setInterval(updateClock, 1000);
        updateClock(); // Initial call
    </script>
</body>
</html>

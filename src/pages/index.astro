---
// --- PAGE BRAIN ---
import { CLAIMS_DATA } from '../CLAIMS_DATA';
import LanguageSwitcher from '../components/LanguageSwitcher.astro';
import en from '../locales/en.json';
import ptBR from '../locales/pt-BR.json';
import ja from '../locales/ja.json';
import es from '../locales/es.json';
import zh from '../locales/zh.json';

const translations = {
    'en': en,
    'pt-BR': ptBR,
    'ja': ja,
    'es': es,
    'zh': zh,
};

// --- Language Detection ---
let lang = 'en'; // Default language
const supportedLanguages = Object.keys(translations);

// 1. Check for language cookie
const langCookie = Astro.cookies.get('language');
if (langCookie && supportedLanguages.includes(langCookie.value)) {
    lang = langCookie.value;
}
// 2. Check for accept-language header
else {
    const acceptLanguage = Astro.request.headers.get('accept-language');
    const browserLang = acceptLanguage?.split(',')[0].split(';')[0];
    if (browserLang && supportedLanguages.includes(browserLang)) {
        lang = browserLang;
    }
}


const t = translations[lang] || en;

// Get the most recent claim date
const latestClaim = CLAIMS_DATA.reduce((latest, current) => {
    const latestDate = new Date(latest.date);
    const currentDate = new Date(current.date);
    return currentDate > latestDate ? current : latest;
});
const latestClaimDate = latestClaim.date;
---

<html lang={lang}>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{t.title}</title>
    <meta name="google-site-verification" content="gi2pzxwjvX7zQtdowKjXbAw1wGHfjs8Cdf2w5ThdNcM" />
    <style>
        body { background-color: #111827; color: white; font-family: sans-serif; padding: 2rem; }
        main { max-width: 80rem; margin: auto; }
        h1 { font-size: 2.25rem; font-weight: bold; text-align: center; margin-bottom: 0.5rem; }
        .submission-container {
            text-align: center;
            margin-bottom: 2rem;
        }
        .submit-button {
            display: inline-block;
            background-color: #4F46E5;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: background-color 0.3s ease;
        }
        .submit-button:hover {
            background-color: #4338CA;
        }
        .time-limit-note {
            text-align: center;
            margin-top: 1rem;
            color: #9CA3AF;
            font-size: 0.875rem;
        }
        h2 { font-size: 1.25rem; color: #9CA3AF; text-align: center; margin-bottom: 3rem; }

        .clock-container {
            text-align: center;
            margin-bottom: 3rem;
        }

        .clock-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #9CA3AF;
        }

        .clock {
            font-size: 4rem;
            font-weight: 900;
            color: white;
            letter-spacing: 0.1em;
            transition: color 0.5s ease;
        }

        .last-claim {
            margin-bottom: 2rem;
            padding: 1rem;
            background-color: #1F2937;
            border-radius: 0.5rem;
            text-align: center;
        }

        .last-claim p {
            margin: 0.5rem 0;
        }

        .table-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .filter-container,
        .sort-container {
            display: flex;
            align-items: center;
        }

        .filter-container label,
        .sort-container label {
            margin-right: 0.5rem;
        }

        .filter-container select,
        .sort-container select {
            background-color: #374151;
            color: white;
            border: 1px solid #4B5563;
            border-radius: 0.25rem;
            padding: 0.5rem;
        }

        table { width: 100%; border-collapse: collapse; }
        thead { background-color: #374151; }
        th, td { padding: 0.75rem 1rem; text-align: left; border-bottom: 1px solid #374151; }
        th { font-size: 0.875rem; font-weight: 600; }
        td { font-size: 0.875rem; color: #D1D5DB; vertical-align: middle; }
        .table-container { overflow-x: auto; border-radius: 0.5rem; background-color: #1F2937; }
        .thumbnail { width: 8rem; border-radius: 0.375rem; }
        .link { color: #60A5FA; text-decoration: none; }
        .link:hover { text-decoration: underline; }
        .badge { display: inline-flex; padding: 0.125rem 0.625rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; white-space: nowrap; }
        td.status-ongoing { background-color: #065F46; color: #A7F3D0; }
        td.status-pending { background-color: #92400E; color: #FDE68A; }
        td.status-expired-unproven { background-color: #991B1B; color: #FECACA; }
        .badge.status-ongoing { background-color: #065F46; color: #D1FAE5; }
        .badge.status-pending { background-color: #92400E; color: #FEF3C7; }
        .badge.status-expired-unproven { background-color: #991B1B; color: #FEE2E2; }
        .watch-button {
            display: inline-flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            background-color: #DC2626;
            color: white;
            text-decoration: none;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: background-color 0.3s;
        }
        .watch-button:hover {
            background-color: #B91C1C;
        }
        .watch-button svg {
            width: 1rem;
            height: 1rem;
            margin-right: 0.375rem;
        }

        /* Style for the new legend section */
        .legend-section {
          margin-top: 3rem;
          padding: 1.5rem;
          background-color: #1F2937;
          border-radius: 0.5rem;
          color: #D1D5DB;
        }
        .legend-section h3 {
          margin-top: 0;
          margin-bottom: 1rem;
          font-size: 1.25rem;
          color: white;
        }
        .legend-section strong {
          color: #9CA3AF;
        }
    </style>
</head>
<body>
    <LanguageSwitcher />
    <main>
        <h1 id="main-title">{t.title}</h1>
        <h2 id="subtitle">{t.subtitle}</h2>

        <div class="submission-container">
            <a href="mailto:aiburstdotcom@gmail.com" class="submit-button" id="submit-prediction-button">{t.submit_prediction}</a>
        </div>

        <div class="clock-container">
            <div class="last-claim">
                <p id="time-elapsed">{t.time_elapsed}</p>
                <p><strong id="last-claim-claim-label">{t.claim_colon}</strong> "<span id="last-claim-claim-text">{latestClaim.claim[lang] || latestClaim.claim['en']}</span>"</p>
                <p><strong id="last-claim-claimer-label">{t.claimer_colon}</strong> {latestClaim.claimer}</p>
                <p><strong id="last-claim-date-label">{t.date_colon}</strong> {latestClaim.date}</p>
            </div>
            <div id="last-burst-bubble" class="clock-title">{t.last_burst_bubble}</div>
            <div id="clock" class="clock" data-start-date={latestClaimDate}></div>
            <p class="time-limit-note" id="time-limit-note">{t.time_limit_note}</p>
        </div>

        <div class="table-controls">
            <div class="filter-container">
                <label id="filter-by-status-label" for="status-filter">{t.filter_by_status}</label>
                <select id="status-filter">
                    <option id="filter-all" value="all">{t.all}</option>
                    <option id="filter-ongoing" value="ongoing">{t.ongoing}</option>
                    <option id="filter-pending" value="pending">{t.pending}</option>
                    <option id="filter-expired-unproven" value="expired_unproven">{t.expired_unproven}</option>
                </select>
            </div>
            <div class="sort-container">
                <label id="sort-by-date-label" for="date-sort">{t.sort_by_date}</label>
                <select id="date-sort">
                    <option id="sort-newest" value="newest">{t.newest_first}</option>
                    <option id="sort-oldest" value="oldest">{t.oldest_first}</option>
                </select>
            </div>
        </div>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th id="table-header-date">{t.date}</th>
                        <th id="table-header-claimer">{t.claimer}</th>
                        <th id="table-header-thumbnail">{t.thumbnail}</th>
                        <th id="table-header-claim">{t.claim}</th>
                        <th id="table-header-link">{t.link}</th>
                        <th id="table-header-status">{t.status}</th>
                        <th id="table-header-claim-type">{t.claim_type}</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <!-- New legend section added here -->
        <div class="legend-section">
          <h3 id="legend-title">{t.status_legend}</h3>
          <p><span class="badge status-ongoing">{t.ongoing}</span> <span id="legend-ongoing">{t.status_ongoing_desc}</span></p>
          <p><span class="badge status-pending">{t.pending}</span> <span id="legend-pending">{t.status_pending_desc}</span></p>
          <p><span class="badge status-expired-unproven">{t.expired_unproven}</span> <span id="legend-expired-unproven" set:html={t.status_expired_unproven_desc} /></span></p>
        </div>

    </main>
    <script define:vars={{ latestClaimDate, CLAIMS_DATA, lang, t, translations }}>
        const clockElement = document.getElementById('clock');
        const startDate = new Date(latestClaimDate  + 'T00:00:00Z');

        const statusFilter = document.getElementById('status-filter');
        const dateSort = document.getElementById('date-sort');
        const tableBody = document.querySelector('table tbody');

        let currentLang = lang;
        let currentTranslations = t;

        // Function to get translations
        function getTranslations(langCode) {
            return translations[langCode] || translations['en'];
        }

        // Helper functions to style the status cells
        const getStatusClass = (status) => {
            if (status.toLowerCase().startsWith('ongoing')) return 'status-ongoing';
            if (status.toLowerCase().startsWith('pending')) return 'status-pending';
            if (status === 'expired_unproven') return 'status-expired-unproven';
            if (status.toLowerCase().startsWith('expired')) return 'status-expired';
            return 'status-default';
        };


        function updateStaticTranslations() {
            document.title = currentTranslations.title;
            document.getElementById('main-title').textContent = currentTranslations.title;
            document.getElementById('subtitle').textContent = currentTranslations.subtitle;
            document.getElementById('time-elapsed').textContent = currentTranslations.time_elapsed;
            document.getElementById('last-burst-bubble').textContent = currentTranslations.last_burst_bubble;
            document.getElementById('filter-by-status-label').textContent = currentTranslations.filter_by_status;
            document.getElementById('filter-all').textContent = currentTranslations.all;
            document.getElementById('filter-ongoing').textContent = currentTranslations.ongoing;
            document.getElementById('filter-pending').textContent = currentTranslations.pending;
            document.getElementById('filter-expired-unproven').textContent = currentTranslations.expired_unproven;
            document.getElementById('sort-by-date-label').textContent = currentTranslations.sort_by_date;
            document.getElementById('sort-newest').textContent = currentTranslations.newest_first;
            document.getElementById('sort-oldest').textContent = currentTranslations.oldest_first;
            document.getElementById('table-header-date').textContent = currentTranslations.date;
            document.getElementById('table-header-claimer').textContent = currentTranslations.claimer;
            document.getElementById('table-header-thumbnail').textContent = currentTranslations.thumbnail;
            document.getElementById('table-header-claim').textContent = currentTranslations.claim;
            document.getElementById('table-header-link').textContent = currentTranslations.link;
            document.getElementById('table-header-status').textContent = currentTranslations.status;
            document.getElementById('table-header-claim-type').textContent = currentTranslations.claim_type;
            document.getElementById('legend-title').textContent = currentTranslations.status_legend;
            document.getElementById('legend-ongoing').textContent = currentTranslations.status_ongoing_desc;
            document.getElementById('legend-pending').textContent = currentTranslations.status_pending_desc;
            document.getElementById('legend-expired-unproven').innerHTML = currentTranslations.status_expired_unproven_desc;
            document.getElementById('submit-prediction-button').textContent = currentTranslations.submit_prediction;
            document.getElementById('time-limit-note').textContent = currentTranslations.time_limit_note;

            // Update last claim section
            const latestClaim = CLAIMS_DATA.find(c => c.date === latestClaimDate);
            if (latestClaim) {
                document.getElementById('last-claim-claim-label').textContent = currentTranslations.claim_colon;
                document.getElementById('last-claim-claim-text').textContent = latestClaim.claim[currentLang] || latestClaim.claim['en'];
                document.getElementById('last-claim-claimer-label').textContent = currentTranslations.claimer_colon;
                document.getElementById('last-claim-date-label').textContent = currentTranslations.date_colon;
            }
        }

        let claims = [...CLAIMS_DATA];

        function renderTable() {
            tableBody.innerHTML = '';
            claims.forEach(claim => {
                const row = document.createElement('tr');
                const claimText = claim.claim[currentLang] || claim.claim['en'];
                const statusText = currentTranslations[claim.status] || claim.status;
                const claimTypeText = currentTranslations[claim.claimType] || claim.claimType;

                row.innerHTML = `
                    <td>${claim.date}</td>
                    <td>${claim.claimer}</td>
                    <td><img src="${claim.thumbnailUrl}" alt="Thumbnail" class="thumbnail" referrerPolicy="no-referrer" /></td>
                    <td>${claimText}</td>
                    <td>
                        <a href="${claim.link}" target="_blank" rel="noopener noreferrer" class="watch-button">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M10,16.5V7.5L16,12M20,4.4C19.4,4.2 15.7,4 12,4C8.3,4 4.6,4.19 4,4.38C2.44,4.9 2,8.4 2,12C2,15.59 2.44,19.1 4,19.61C4.6,19.81 8.3,20 12,20C15.7,20 19.4,19.81 20,19.61C21.56,19.1 22,15.59 22,12C22,8.4 21.56,4.9 20,4.4Z"></path></svg>
                            ${currentTranslations.watch}
                        </a>
                    </td>
                    <td class="${getStatusClass(claim.status)}">${statusText}</td>
                    <td>${claimTypeText}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        function updateData() {
            let filteredClaims = [...CLAIMS_DATA];

            // Filter by status
            const status = statusFilter.value;
            if (status !== 'all') {
                filteredClaims = filteredClaims.filter(claim => claim.status === status);
            }

            // Sort by date
            const sortOrder = dateSort.value;
            filteredClaims.sort((a, b) => {
                const dateA = new Date(a.date);
                const dateB = new Date(b.date);
                if (sortOrder === 'newest') {
                    return dateB - dateA;
                } else {
                    return dateA - dateB;
                }
            });

            claims = filteredClaims;
            renderTable();
        }

        statusFilter.addEventListener('change', updateData);
        dateSort.addEventListener('change', updateData);

        // Language handling on the client
        document.addEventListener('DOMContentLoaded', () => {
            const savedLanguage = localStorage.getItem('language') || document.cookie.split('; ').find(row => row.startsWith('language='))?.split('=')[1] || lang;
            if (savedLanguage !== currentLang) {
                currentLang = savedLanguage;
                currentTranslations = getTranslations(currentLang);
            }
            updateStaticTranslations();
            updateData();
        });

    </script>
    <script>
        function updateClock() {
            const clockElement = document.getElementById('clock');
            if (!clockElement) return;

            const startDate = new Date(clockElement.dataset.startDate);
            const now = new Date();
            const diff = now - startDate;

            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((diff % (1000 * 60)) / 1000);

            clockElement.textContent =
                `${days.toString().padStart(2, '0')}d ${hours.toString().padStart(2, '0')}h ${minutes.toString().padStart(2, '0')}m ${seconds.toString().padStart(2, '0')}s`;

            // Change color based on elapsed time
            if (days < 30) {
                clockElement.style.color = '#60A5FA'; // Calm blue
            } else if (days < 60) {
                clockElement.style.color = '#FBBF24'; // Warning yellow
            } else {
                clockElement.style.color = '#EF4444'; // Warning red
            }
        }

        setInterval(updateClock, 1000);
        document.addEventListener('DOMContentLoaded', updateClock);
    </script>
</body>
</html>

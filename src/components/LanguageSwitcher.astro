---
const languages = [
    { code: 'en', name: 'English', nativeName: 'English', flag: 'https://flagpedia.net/data/flags/w580/us.png' },
    { code: 'pt-BR', name: 'Brazilian Portuguese', nativeName: 'Português Brasileiro', flag: 'https://flagpedia.net/data/flags/w580/br.png' },
    { code: 'ja', name: 'Japanese', nativeName: '日本語', flag: 'https://flagpedia.net/data/flags/w580/jp.png' },
    { code: 'es', name: 'Spanish', nativeName: 'Español', flag: 'https://flagpedia.net/data/flags/w580/es.png' },
    { code: 'zh', name: 'Chinese', nativeName: '中文', flag: 'https://flagpedia.net/data/flags/w580/cn.png' },
];

let currentLangCode = 'en';
if (typeof Astro.cookies !== 'undefined') {
    const langCookie = Astro.cookies.get('language');
    if (langCookie && languages.some(l => l.code === langCookie.value)) {
        currentLangCode = langCookie.value;
    }
}
const currentLang = languages.find(l => l.code === currentLangCode) || languages[0];
---

<div class="language-switcher" id="language-switcher-container" data-languages={JSON.stringify(languages)}>
    <button id="language-switcher-button">
        <img src={currentLang.flag} alt={currentLang.name} class="flag-icon" />
        <span class="lang-name">{currentLang.nativeName}</span>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="chevron-down">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
    </button>
    <div id="language-options" class="language-options">
        {languages.map(lang => (
            <a href="#" class="language-option" data-lang={lang.code}>
                <img src={lang.flag} alt={lang.name} class="flag-icon" />
                <span class="lang-name">{lang.nativeName}</span>
            </a>
        ))}
    </div>
</div>

<style is:global>
    .language-switcher {
        position: absolute;
        top: 1rem;
        right: 1rem;
        z-index: 10;
        font-family: inherit;
    }
    #language-switcher-button {
        display: flex;
        align-items: center;
        background-color: #374151;
        color: white;
        border: 1px solid #4B5563;
        border-radius: 0.375rem;
        padding: 0.5rem 0.75rem;
        cursor: pointer;
        transition: background-color 0.2s;
        font-size: 0.875rem;
        line-height: 1.25rem;
    }
    #language-switcher-button:hover {
        background-color: #4B5563;
    }
    .flag-icon {
        width: 1.5rem;
        height: 1rem;
        margin-right: 0.75rem;
        border-radius: 0.125rem;
        object-fit: cover;
    }
    .lang-name {
        flex-grow: 1;
        text-align: left;
    }
    .chevron-down {
        width: 1.25rem;
        height: 1.25rem;
        margin-left: 0.75rem;
        transition: transform 0.2s;
    }
    #language-switcher-button.open .chevron-down {
        transform: rotate(180deg);
    }
    .language-options {
        display: none;
        position: absolute;
        top: 100%;
        right: 0;
        background-color: #374151;
        border: 1px solid #4B5563;
        border-radius: 0.375rem;
        padding: 0.5rem;
        margin-top: 0.25rem;
        min-width: 12rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        opacity: 0;
        transform: translateY(-10px);
        transition: opacity 0.2s, transform 0.2s;
    }
    .language-options.show {
        display: block;
        opacity: 1;
        transform: translateY(0);
    }
    .language-option {
        display: flex;
        align-items: center;
        padding: 0.5rem 0.75rem;
        color: white;
        text-decoration: none;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
        font-size: 0.875rem;
        line-height: 1.25rem;
    }
    .language-option:hover {
        background-color: #4B5563;
    }
</style>

<script>
    function initializeLanguageSwitcher() {
        const container = document.getElementById('language-switcher-container');
        // If the container is not found, it means the component is not on the page.
        if (!container) return;

        // Check if the event listeners are already attached to avoid duplication.
        if (container.hasAttribute('data-initialized')) {
            return;
        }

        const button = container.querySelector('#language-switcher-button');
        const options = container.querySelector('#language-options');

        // If these elements are missing, we can't proceed.
        if (!button || !options) return;

        const languages = JSON.parse(container.dataset.languages);

        button.addEventListener('click', (e) => {
            e.stopPropagation();
            options.classList.toggle('show');
            button.classList.toggle('open');
        });

        document.addEventListener('click', (event) => {
            if (!container.contains(event.target)) {
                options.classList.remove('show');
                button.classList.remove('open');
            }
        });

        const optionLinks = options.querySelectorAll('.language-option');
        optionLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                const selectedLanguage = link.getAttribute('data-lang');
                localStorage.setItem('language', selectedLanguage);
                document.cookie = `language=${selectedLanguage};path=/`;
                window.location.reload();
            });
        });

        const savedLanguage = localStorage.getItem('language') || document.cookie.split('; ').find(row => row.startsWith('language='))?.split('=')[1];
        if (savedLanguage) {
            const currentLang = languages.find(l => l.code === savedLanguage);
            if (currentLang) {
                const buttonImg = button.querySelector('.flag-icon');
                const buttonSpan = button.querySelector('.lang-name');
                buttonImg.src = currentLang.flag;
                buttonImg.alt = currentLang.name;
                buttonSpan.textContent = currentLang.nativeName;
            }
        }

        // Mark as initialized
        container.setAttribute('data-initialized', 'true');
    }

    // Run the initialization
    initializeLanguageSwitcher();

    // Also run it after Astro's View Transitions
    document.addEventListener('astro:after-swap', initializeLanguageSwitcher);
</script>
